[{"_path":"/blog/useful-linux-commands-and-utilities","_draft":false,"_partial":false,"_empty":false,"title":"Useful Linux commands and Utilities","description":"A compilation of useful Linux commands and utilities. This compilation will grow and be upgraded with time.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"useful-linux-commands-and-utilities"},"children":[{"type":"text","value":"Useful Linux commands and Utilities"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following article shows a list of Linux Bash commands and utilities good to know if you are working on a Linux environment. This article will be updated regularly with more content."}]},{"type":"element","tag":"h2","props":{"id":"bash-commands"},"children":[{"type":"text","value":"Bash commands"}]},{"type":"element","tag":"h3","props":{"id":"xargs--using-the-output-of-the-last-command-as-arguments-of-another-command"},"children":[{"type":"text","value":"Xargs | Using the output of the last command as arguments of another command"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://man7.org/linux/man-pages/man1/xargs.1.html","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Xargs"}]},{"type":"text","value":" is a command that allows you to pass the standard input into arguments of another command. This is extremely useful when you want, by piping, to feed a command that doesn't support standard input with the result of another command.\nAn example of this is the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rm"}]},{"type":"text","value":", which only uses arguments as input mechanism."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below you can see an example using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":" together with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rm"}]},{"type":"text","value":" to remove all files and directories that start with .git from the current folder."}]},{"type":"element","tag":"code","props":{"code":"find . -name \".git*\"  | xargs rm -rf\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"find . -name \".git*\"  | xargs rm -rf\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Assuming we have the following files/directories in our current folder:"}]},{"type":"element","tag":"code","props":{"code":".git/\n.github/\n.gitignore\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":".git/\n.github/\n.gitignore\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Last command translates into something like the following:"}]},{"type":"element","tag":"code","props":{"code":"rm -rf \"./.git\" \"./.github\" \"./.gitignore\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"rm -rf \"./.git\" \"./.github\" \"./.gitignore\"\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can see, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":" transforms the result of find into arguments for "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rm -rf"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"grep--search-for-a-string-within-all-files-in-a-directory-and-its-subfolders"},"children":[{"type":"text","value":"Grep | Search for a string within all files in a directory and its subfolders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://man7.org/linux/man-pages/man1/grep.1.html","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Grep"}]},{"type":"text","value":" is a command that allows you to search for a specific pattern given an input, which could be a file or text piped from the result of another command."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below you can see the use of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" to search for a specific pattern inside files of a folder and its subfolders. This use of grep turns out to be incredibly useful if you are a system administrator; you are able, with one command, to search quickly inside the source code of specific software for an error message giving you the opportunity to identify the problematic code and solve the issue without the need of totally know in its full the architecture of the software you are maintaining."}]},{"type":"element","tag":"code","props":{"code":"grep -rno \"pattern_to_search\" ./folder\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"grep -rno \"pattern_to_search\" ./folder\n\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-r"}]},{"type":"text","value":" : Search recursively inside files of a directory and its subdirectories."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-n"}]},{"type":"text","value":" : Print the line number where the match occurs inside the file."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-o"}]},{"type":"text","value":" : Instead of printing the entire matching line, it prints only the matching part."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The next command allows you to print only the path of all files that contain a specific "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"word pattern"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"grep -rwl \"pattern_to_search\" ./folder\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"grep -rwl \"pattern_to_search\" ./folder\n\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-w"}]},{"type":"text","value":" : Search for a \"word\" that matches the pattern. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep -w"}]},{"type":"text","value":" considers as a \"word\" that text fragment separated by symbols that can not constitute a word, such as spaces, line breaks..."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-l"}]},{"type":"text","value":" : Only shows the path of the files that contain the specific pattern."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can combine the arguments of the commands above to adapt to a particular need."}]},{"type":"element","tag":"h3","props":{"id":"find--find-files-that-match-multiple-names"},"children":[{"type":"text","value":"Find | Find files that match multiple names"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://man7.org/linux/man-pages/man1/find.1.html","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Find"}]},{"type":"text","value":" allows you to search for files inside a directory structure."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command allows you to search for all files that have the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".html"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".js"}]},{"type":"text","value":" or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".css"}]},{"type":"text","value":" extension inside a folder hierarchy."}]},{"type":"element","tag":"code","props":{"code":"find \"./folder\" -type f -name \"*.html\" -o -name \"*.js\" -o -name \"*.css\"\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"find \"./folder\" -type f -name \"*.html\" -o -name \"*.js\" -o -name \"*.css\"\n\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-type"}]},{"type":"text","value":" : Indicates the type of the element to search. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" is for a regular file whilst "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"d"}]},{"type":"text","value":" is for a directory. More information of find types can be found here: "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"man -P 'less +/[\\ ]{3}-type' find"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-name"}]},{"type":"text","value":" : Search for files that match a particular shell pattern. Shell patterns can contain metacharacters such as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" which matches zero or more characters in a string."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-o"}]},{"type":"text","value":" : Or operator. Allows you to concatenate several -name arguments using the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"or"}]},{"type":"text","value":" operator. Find has more operators: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-a"}]},{"type":"text","value":" for "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"and"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"!"}]},{"type":"text","value":" to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"negate"}]},{"type":"text","value":" and get files that do not match... For more information, you can introduce "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"man -P 'less +/[\\ ]{3}OPERATORS' find"}]},{"type":"text","value":" to get information about other operators you can use with find."}]}]},{"type":"element","tag":"h3","props":{"id":"pgrep--get-the-pid-of-a-process-by-its-name"},"children":[{"type":"text","value":"Pgrep | Get the PID of a process by its name"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With pgrep you can obtain the PID of processes whose name matches the indicated regular expression. Pgrep also has arguments that allow you to search for other process parameters such as user, group, state..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command allows you to search for a process that contains "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"spotify\""}]},{"type":"text","value":" or "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"code\""}]},{"type":"text","value":" inside its name."}]},{"type":"element","tag":"code","props":{"code":"pgrep \"spotify|code\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"pgrep \"spotify|code\"\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can craft "},{"type":"element","tag":"a","props":{"href":"https://regexr.com/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":" your regular expressions to solve your specific use case."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command is useful to use its result as input of another command using, for example, command substitution:"}]},{"type":"element","tag":"code","props":{"code":"ps -p $(pgrep \"spotify|code\")\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ps -p $(pgrep \"spotify|code\")\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The command above uses the output of the enclosed "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pgrep"}]},{"type":"text","value":" and inserts it as arguments into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ps -p"}]},{"type":"text","value":"."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Command substitution"}]}]},{"type":"element","tag":"h3","props":{"id":"pkill--kill-a-process-by-its-name"},"children":[{"type":"text","value":"Pkill | Kill a process by its name"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pkill share the same arguments as pgrep with the difference that instead of only printing the PID of processes it kills the processes that match the regular expression."}]},{"type":"element","tag":"code","props":{"code":"pkill \"spotify|code\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"pkill \"spotify|code\"\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"pkill--kill-all-processes-of-a-user"},"children":[{"type":"text","value":"Pkill | Kill all processes of a user"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use the argument "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-u"}]},{"type":"text","value":" of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pkill"}]},{"type":"text","value":" to select processes that belong to a particular user."}]},{"type":"element","tag":"code","props":{"code":"pkill -u \"username\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"pkill -u \"username\"\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"grep--sed--replace-the-content-of-files-from-a-specific-folder-and-its-subfolders"},"children":[{"type":"text","value":"Grep | Sed | Replace the content of files from a specific folder and its subfolders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sed ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"S"}]},{"type":"text","value":"tream "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"ed"}]},{"type":"text","value":"itor) is a command that allows you to transform text that comes from a file or input. It works by replacing a specific match of a regular expression with the desired text."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command uses grep, as described "},{"type":"element","tag":"a","props":{"href":"#grep--search-for-a-string-within-all-files-in-a-directory-and-its-subfolders"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":", together with sed to replace text inside all files that contain text that matches a regular expression."}]},{"type":"element","tag":"code","props":{"code":" grep -rl \"regex\" ./folder | xargs sed -i 's$text$replacement$g' \n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" grep -rl \"regex\" ./folder | xargs sed -i 's$text$replacement$g' \n\n"}]}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"grep -rl"}]},{"type":"text","value":" : Get the list of files that matches \"regex\" inside the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"./folder\""}]},{"type":"text","value":" hierarchy."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" : Pipes the result of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":" : Transform the standard input received by piping into arguments to the next command."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"sed -i \"s$text$replacement$g\" \"file1\" \"file2\" ..."}]},{"type":"text","value":" : Replace text in a file or files where "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" is the regular expression to search for, whilst "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"replace"}]},{"type":"text","value":" is the text you want in its place. Here the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"s"}]},{"type":"text","value":" specifies the substitution operation and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" specifies you want to replace all occurrences found in the text. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$"}]},{"type":"text","value":"s are the delimiters that aim to separate the substitution operator, the text, the replacement and the character that specifies in which ocurrences the text should be replaced. This delimiter can be any symbol that does not interfere with the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" and its "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"replacement"}]},{"type":"text","value":". Ex: "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"\"s/text/replacement/g\""}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"\"s|text|replacement|g\""}]},{"type":"text","value":"..."}]}]},{"type":"element","tag":"h3","props":{"id":"du--get-the-size-of-a-folder-or-a-file"},"children":[{"type":"text","value":"Du | Get the size of a folder or a file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Du ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"D"}]},{"type":"text","value":"isk "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"U"}]},{"type":"text","value":"sage) is a command that gives you the size that takes on the disk of a filesystem element."}]},{"type":"element","tag":"code","props":{"code":"du -h -s ./folder\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"du -h -s ./folder\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-h"}]},{"type":"text","value":" : Prints the result in a format that is easily understood by humans."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-s"}]},{"type":"text","value":" : It shows only the total size of the size of a folder, instead of showing the size of all elements inside it."}]}]},{"type":"element","tag":"h3","props":{"id":"wc--print-the-number-of-lines-words-or-bytes-from-an-input-or-a-file"},"children":[{"type":"text","value":"Wc | Print the number of lines, words or bytes from an input or a file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Wc ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"W"}]},{"type":"text","value":"ord "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"c"}]},{"type":"text","value":"ounting) is a command that helps you to count lines and words inside a file or an input. The following command counts the number of lines result of the ls command. Since each line represents a file or a directory, the whole command that is shown below counts the number of elements inside a directory:"}]},{"type":"element","tag":"code","props":{"code":"ls | wc -l\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ls | wc -l\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If instead, you want to count the number of words in a file:"}]},{"type":"element","tag":"code","props":{"code":"wc -w file\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"wc -w file\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Or a number of bytes:"}]},{"type":"element","tag":"code","props":{"code":"wc -c file\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"wc -c file\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By default "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc"}]},{"type":"text","value":" without any arguments returns 3 numbers that represent: the number of lines, number of words and number of bytes."}]},{"type":"element","tag":"h3","props":{"id":"find--du--get-a-sorted-list-of-all-directories-in-a-hierarchy-ordered-by-their-size"},"children":[{"type":"text","value":"Find | Du | Get a sorted list of all directories in a hierarchy ordered by their size"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command searches recursively for all directories that exist in a path and obtains their size on disk. When the process finishes the result is piped into the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" command to sort the result based on the folder size output."}]},{"type":"element","tag":"code","props":{"code":"echo \"$(for i in $(find /home/aegos/Descargas -type d); do du -hs $i 2>/dev/null; done;)\" | sort -h\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"echo \"$(for i in $(find /home/aegos/Descargas -type d); do du -hs $i 2>/dev/null; done;)\" | sort -h\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Translated to human language the command above means the following: For each folder found by the find command execute "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"du"}]},{"type":"text","value":" to check the space of each "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":" directory on disk and pass the entire result of the query to the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" to organize the result based on the space."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"find \"./folder\" -type d"}]},{"type":"text","value":" : Search for all directories in a path."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"du -hs"}]},{"type":"text","value":" : Prints the size of a folder in a human readable way, together with the directory path name."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"sort -h"}]},{"type":"text","value":" : Sort the entire result by the size obtained with du. The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-h"}]},{"type":"text","value":" argument indicates the command that you want to sort using the size information that was printed in a human readable way. In this way data such as: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"21G"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"10M"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"100K"}]},{"type":"text","value":" is sorted accordingly."}]},{"type":"element","tag":"h3","props":{"id":"find--wc--get-the-number-of-files-inside-all-directories-in-a-hierarchy"},"children":[{"type":"text","value":"Find | Wc | Get the number of files inside all directories in a hierarchy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command searches recursively for all directories that exist in a path and obtains the number of elements inside. When the process finishes the result is piped into the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" command to sort the result based on the number of elements inside. Useful for cluster clients with resource limits such as a maximum number of files, the command allows you to identify which is the folder with more files inside."}]},{"type":"element","tag":"code","props":{"code":"echo \"$(for i in $(find /folder -type d); do echo \"$( ls -la \"$i\" 2>/dev/null| grep \"^[-]\"| wc -l) $i\"; done;)\"| sort -n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"echo \"$(for i in $(find /folder -type d); do echo \"$( ls -la \"$i\" 2>/dev/null| grep \"^[-]\"| wc -l) $i\"; done;)\"| sort -n\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Translated to human language the command above means the following: For each folder found by the find command execute "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" to get the elements inside each folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":", filter the result to get only file elements and pass its result to the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc -l"}]},{"type":"text","value":" to count them. When all directories have been visited, pass the entire result to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" command to organize the directories based on their ammount of elements."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"find ./folder -type d"}]},{"type":"text","value":" : Search for all directories in a path."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"echo \"$( ls -la \"$i\" 2>/dev/null| grep \"^[-]\"| wc -l) $i\"; done;)\""}]},{"type":"text","value":" : Prints the result of executing the command that counts the number of files inside a directory together with the path of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"- "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"ls -la \"$i\" 2>/dev/null"}]},{"type":"text","value":" : Get all elements of a directory and if there is any error output to /dev/null to prevent it from getting piped into the next command. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"2>/dev/null"}]},{"type":"text","value":" redirects stderr to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/dev/null"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"- "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"grep \"^[-]\""}]},{"type":"text","value":" : Print only lines that start with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" from the output of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" that will match with those lines that refer to a file, filtering in this way every directory or symbolic link."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"- "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"wc -l"}]},{"type":"text","value":" : From the filtered result obtained with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" print the number of lines."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"sort -n"}]},{"type":"text","value":" : Sort the entire result by the count result obtained with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc"}]},{"type":"text","value":". The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-n"}]},{"type":"text","value":" argument indicates the command that you want to sort by number."}]},{"type":"element","tag":"h3","props":{"id":"setsid--run-a-command-in-background"},"children":[{"type":"text","value":"Setsid | Run a command in background"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Setsid allows you to run a command with no controlling terminal. Normally if you execute a program inside the terminal, the shell you are using is the parent process of the new process. When you close the shell a SIGHUP ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Sig"}]},{"type":"text","value":"nal "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"h"}]},{"type":"text","value":"ang "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"up"}]},{"type":"text","value":") signal is sent to all its child processes, which by default its response to this behavior is terminate. Setsid makes the new process a session and process group leader, whose father would be directly systemd (or init depending of the linux distribution you are on), which means that it will not receive the SIGHUP signal when the controlling terminal is closed since the program does not hang from it."}]},{"type":"element","tag":"code","props":{"code":"setsid firefox &>/dev/null\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"setsid firefox &>/dev/null\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It is important to mention that by default the program output is still attached to the terminal from where setsid is executed, so if you don't want your terminal to be polluted with the output or errors coming from the new program executed ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"firefox"}]},{"type":"text","value":" in the case of the command above), you can redirect its output to the null device: "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"&>/dev/null"}]},{"type":"text","value":". "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"1>"}]},{"type":"text","value":" to redirect the output (stdout), "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"2>"}]},{"type":"text","value":" to redirect errors (stderr) and "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"&>"}]},{"type":"text","value":" to redirect both of them."}]}]},{"type":"element","tag":"h3","props":{"id":"nohup--run-a-command-in-background-by-making-it-ignore-the-sighup-signal"},"children":[{"type":"text","value":"Nohup | Run a command in background by making it ignore the sighup signal"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nohup allows you to run a command that will ignore any SIGHUP signal received. When the shell closes, the process started with nohup ignores the SIGHUP signal, becoming, in this way, an orphan. The orphan process will then be adopted by systemd or init, allowing its execution continuity in background."}]},{"type":"element","tag":"code","props":{"code":"nohup firefox &>/dev/null &\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nohup firefox &>/dev/null &\n"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"zsh"}]},{"type":"text","value":" instead of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" you can run a program in background just by putting "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"&!"}]},{"type":"text","value":" at the end of command such as "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"firefox &!"}]}]}]},{"type":"element","tag":"h3","props":{"id":"tee--redirect-the-output-of-a-command-to-multiple-outputs"},"children":[{"type":"text","value":"Tee | Redirect the output of a command to multiple outputs"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Tee is a command that allows you to redirect stdin to multiple commands, output files or/and standard output, which allows you to duplicate and/or process this information simultaneously using different tools or commands."}]},{"type":"element","tag":"code","props":{"code":"echo \"a a\"| tee $(tty) >(wc -w) file_last_output -a file_all_outputs | sed \"s/a/b/g\" \n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"echo \"a a\"| tee $(tty) >(wc -w) file_last_output -a file_all_outputs | sed \"s/a/b/g\" \n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Translated to human language the command above takes the result of echo and pipes its result into the tee command which duplicates the input received to write into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$(tty)"}]},{"type":"text","value":" (which is the file connected to the current terminal) to print into the current terminal, to pass stdin to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc -w"}]},{"type":"text","value":" in order to count the number of words that are received from the echo command, to write stdin into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"file_last_output"}]},{"type":"text","value":", to append it into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"file_all_outputs"}]},{"type":"text","value":", to be finally piped into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sed"}]},{"type":"text","value":" to replace each \"a\" into \"b\", result that will be printed into the terminal."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"$(tty)"}]},{"type":"text","value":" : Command substitution. Takes the output of the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"tty"}]},{"type":"text","value":" to be used as argument in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"tee"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":">(wc -w)"}]},{"type":"text","value":" : Duplicates the input received by tee and feeds the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc"}]},{"type":"text","value":" command to count the number of words."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"file_last_output"}]},{"type":"text","value":" : Duplicates the input received by tee and outputs into the file file_las_output."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"-a file_last_output"}]},{"type":"text","value":" : Duplicates the input received by tee and appends into the file file_all_outputs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash"},"children":[{"type":"text","value":"| sed \"s/a/b/g\""}]},{"type":"text","value":" : Pipes stdout of tee which has the same content as its input into sed to turn every \"a\" into \"b\"."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Notice that this example is a little bit awkward and it will be replaced by a better use case when it is found. The purpose of the command above is to show the use of tee with command substitution, with a command as receiver, a normal file as output, appending into an ouput file and piping at the end."}]}]},{"type":"element","tag":"h3","props":{"id":"python--using-python-directly-from-the-terminal"},"children":[{"type":"text","value":"Python | Using Python directly from the terminal"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can make use of bash pipes together with python by using the stdin library. The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-c"}]},{"type":"text","value":" allows you to pass code to python as argument without the need of using files. This is interesting if you want to simplify inline commands that would be complex in case they are written entirely with bash."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command pipes the result of ls into python3 -c, and then the python program loops over the lines received as stdin, result of the ls piping, printing them using the standard output."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Python syntax is highly dependant of breaklines, so in order to use them inside inline bash commands you need to make use of echo as shown in the command below:"}]}]},{"type":"element","tag":"code","props":{"code":"ls | python3 -c \"$(echo \"from sys import stdin\\nfor line in stdin: print(line)\")\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ls | python3 -c \"$(echo \"from sys import stdin\\nfor line in stdin: print(line)\")\"\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"or making use of a non-POSIX compliant method such as "},{"type":"element","tag":"a","props":{"href":"https://www.gnu.org/software/bash/manual/bash.html#ANSI_002dC-Quoting","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"ANSI-C quoted string"}]},{"type":"text","value":" shown below:"}]},{"type":"element","tag":"code","props":{"code":"ls | python3 -c $'from sys import stdin\\nfor line in stdin: print(line)'\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"ls | python3 -c $'from sys import stdin\\nfor line in stdin: print(line)'\n\n"}]}]}]}]},"date":"2022-08-01","language":"en","tags":["Linux"],"image":"/assets/img/blog/linux-commands-and-utilities.jpg","published":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"useful-linux-commands-and-utilities"},"children":[{"type":"text","value":"Useful Linux commands and Utilities"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following article shows a list of Linux Bash commands and utilities good to know if you are working on a Linux environment. This article will be updated regularly with more content."}]},{"type":"element","tag":"h2","props":{"id":"bash-commands"},"children":[{"type":"text","value":"Bash commands"}]},{"type":"element","tag":"h3","props":{"id":"xargs--using-the-output-of-the-last-command-as-arguments-of-another-command"},"children":[{"type":"text","value":"Xargs | Using the output of the last command as arguments of another command"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://man7.org/linux/man-pages/man1/xargs.1.html","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Xargs"}]},{"type":"text","value":" is a command that allows you to pass the standard input into arguments of another command. This is extremely useful when you want, by piping, to feed a command that doesn't support standard input with the result of another command.\nAn example of this is the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rm"}]},{"type":"text","value":", which only uses arguments as input mechanism."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below you can see an example using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":" together with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rm"}]},{"type":"text","value":" to remove all files and directories that start with .git from the current folder."}]},{"type":"element","tag":"code","props":{"code":"find . -name \".git*\"  | xargs rm -rf\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"find "}]},{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" -name "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":".git*"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" xargs rm -rf"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Assuming we have the following files/directories in our current folder:"}]},{"type":"element","tag":"code","props":{"code":".git/\n.github/\n.gitignore\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{}},"children":[{"type":"text","value":".git/\n.github/\n.gitignore"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Last command translates into something like the following:"}]},{"type":"element","tag":"code","props":{"code":"rm -rf \"./.git\" \"./.github\" \"./.gitignore\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"rm -rf "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"./.git"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"./.github"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"./.gitignore"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can see, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":" transforms the result of find into arguments for "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"rm -rf"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"grep--search-for-a-string-within-all-files-in-a-directory-and-its-subfolders"},"children":[{"type":"text","value":"Grep | Search for a string within all files in a directory and its subfolders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://man7.org/linux/man-pages/man1/grep.1.html","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Grep"}]},{"type":"text","value":" is a command that allows you to search for a specific pattern given an input, which could be a file or text piped from the result of another command."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Below you can see the use of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" to search for a specific pattern inside files of a folder and its subfolders. This use of grep turns out to be incredibly useful if you are a system administrator; you are able, with one command, to search quickly inside the source code of specific software for an error message giving you the opportunity to identify the problematic code and solve the issue without the need of totally know in its full the architecture of the software you are maintaining."}]},{"type":"element","tag":"code","props":{"code":"grep -rno \"pattern_to_search\" ./folder\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"grep -rno "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"pattern_to_search"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" ./folder"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-r"}]},{"type":"text","value":" : Search recursively inside files of a directory and its subdirectories."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-n"}]},{"type":"text","value":" : Print the line number where the match occurs inside the file."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-o"}]},{"type":"text","value":" : Instead of printing the entire matching line, it prints only the matching part."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The next command allows you to print only the path of all files that contain a specific "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"word pattern"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"grep -rwl \"pattern_to_search\" ./folder\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"grep -rwl "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"pattern_to_search"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" ./folder"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-w"}]},{"type":"text","value":" : Search for a \"word\" that matches the pattern. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep -w"}]},{"type":"text","value":" considers as a \"word\" that text fragment separated by symbols that can not constitute a word, such as spaces, line breaks..."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-l"}]},{"type":"text","value":" : Only shows the path of the files that contain the specific pattern."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can combine the arguments of the commands above to adapt to a particular need."}]},{"type":"element","tag":"h3","props":{"id":"find--find-files-that-match-multiple-names"},"children":[{"type":"text","value":"Find | Find files that match multiple names"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://man7.org/linux/man-pages/man1/find.1.html","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Find"}]},{"type":"text","value":" allows you to search for files inside a directory structure."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command allows you to search for all files that have the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".html"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".js"}]},{"type":"text","value":" or "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".css"}]},{"type":"text","value":" extension inside a folder hierarchy."}]},{"type":"element","tag":"code","props":{"code":"find \"./folder\" -type f -name \"*.html\" -o -name \"*.js\" -o -name \"*.css\"\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"find "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"./folder"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" -type f -name "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"*.html"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" -o -name "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"*.js"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" -o -name "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"*.css"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-type"}]},{"type":"text","value":" : Indicates the type of the element to search. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" is for a regular file whilst "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"d"}]},{"type":"text","value":" is for a directory. More information of find types can be found here: "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"man -P "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"less +/[\\ ]{3}-type"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" find"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-name"}]},{"type":"text","value":" : Search for files that match a particular shell pattern. Shell patterns can contain metacharacters such as "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" which matches zero or more characters in a string."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-o"}]},{"type":"text","value":" : Or operator. Allows you to concatenate several -name arguments using the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"or"}]},{"type":"text","value":" operator. Find has more operators: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-a"}]},{"type":"text","value":" for "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"and"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"!"}]},{"type":"text","value":" to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"negate"}]},{"type":"text","value":" and get files that do not match... For more information, you can introduce "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"man -P "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"less +/[\\ ]{3}OPERATORS"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" find"}]}]},{"type":"text","value":" to get information about other operators you can use with find."}]}]},{"type":"element","tag":"h3","props":{"id":"pgrep--get-the-pid-of-a-process-by-its-name"},"children":[{"type":"text","value":"Pgrep | Get the PID of a process by its name"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With pgrep you can obtain the PID of processes whose name matches the indicated regular expression. Pgrep also has arguments that allow you to search for other process parameters such as user, group, state..."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command allows you to search for a process that contains "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"spotify\""}]},{"type":"text","value":" or "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"code\""}]},{"type":"text","value":" inside its name."}]},{"type":"element","tag":"code","props":{"code":"pgrep \"spotify|code\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"pgrep "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"spotify|code"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can craft "},{"type":"element","tag":"a","props":{"href":"https://regexr.com/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":" your regular expressions to solve your specific use case."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This command is useful to use its result as input of another command using, for example, command substitution:"}]},{"type":"element","tag":"code","props":{"code":"ps -p $(pgrep \"spotify|code\")\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"ps -p "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"pgrep "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"spotify|code"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\")"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The command above uses the output of the enclosed "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pgrep"}]},{"type":"text","value":" and inserts it as arguments into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ps -p"}]},{"type":"text","value":"."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Command substitution"}]}]},{"type":"element","tag":"h3","props":{"id":"pkill--kill-a-process-by-its-name"},"children":[{"type":"text","value":"Pkill | Kill a process by its name"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pkill share the same arguments as pgrep with the difference that instead of only printing the PID of processes it kills the processes that match the regular expression."}]},{"type":"element","tag":"code","props":{"code":"pkill \"spotify|code\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"pkill "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"spotify|code"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"pkill--kill-all-processes-of-a-user"},"children":[{"type":"text","value":"Pkill | Kill all processes of a user"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use the argument "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-u"}]},{"type":"text","value":" of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pkill"}]},{"type":"text","value":" to select processes that belong to a particular user."}]},{"type":"element","tag":"code","props":{"code":"pkill -u \"username\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"pkill -u "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"username"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"grep--sed--replace-the-content-of-files-from-a-specific-folder-and-its-subfolders"},"children":[{"type":"text","value":"Grep | Sed | Replace the content of files from a specific folder and its subfolders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sed ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"S"}]},{"type":"text","value":"tream "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"ed"}]},{"type":"text","value":"itor) is a command that allows you to transform text that comes from a file or input. It works by replacing a specific match of a regular expression with the desired text."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command uses grep, as described "},{"type":"element","tag":"a","props":{"href":"#grep--search-for-a-string-within-all-files-in-a-directory-and-its-subfolders"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":", together with sed to replace text inside all files that contain text that matches a regular expression."}]},{"type":"element","tag":"code","props":{"code":" grep -rl \"regex\" ./folder | xargs sed -i 's$text$replacement$g' \n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" grep -rl "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"regex"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" ./folder "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" xargs sed -i "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s$text$replacement$g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]}]}]}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"grep -rl"}]},{"type":"text","value":" : Get the list of files that matches \"regex\" inside the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"./folder\""}]},{"type":"text","value":" hierarchy."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" : Pipes the result of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"xargs"}]},{"type":"text","value":" : Transform the standard input received by piping into arguments to the next command."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"sed -i "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"text"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"replacement"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"file1"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"file2"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" ..."}]}]},{"type":"text","value":" : Replace text in a file or files where "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" is the regular expression to search for, whilst "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"replace"}]},{"type":"text","value":" is the text you want in its place. Here the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"s"}]},{"type":"text","value":" specifies the substitution operation and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" specifies you want to replace all occurrences found in the text. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$"}]},{"type":"text","value":"s are the delimiters that aim to separate the substitution operator, the text, the replacement and the character that specifies in which ocurrences the text should be replaced. This delimiter can be any symbol that does not interfere with the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" and its "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"replacement"}]},{"type":"text","value":". Ex: "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s/text/replacement/g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s|text|replacement|g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"text","value":"..."}]}]},{"type":"element","tag":"h3","props":{"id":"du--get-the-size-of-a-folder-or-a-file"},"children":[{"type":"text","value":"Du | Get the size of a folder or a file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Du ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"D"}]},{"type":"text","value":"isk "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"U"}]},{"type":"text","value":"sage) is a command that gives you the size that takes on the disk of a filesystem element."}]},{"type":"element","tag":"code","props":{"code":"du -h -s ./folder\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"du -h -s ./folder"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-h"}]},{"type":"text","value":" : Prints the result in a format that is easily understood by humans."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"-s"}]},{"type":"text","value":" : It shows only the total size of the size of a folder, instead of showing the size of all elements inside it."}]}]},{"type":"element","tag":"h3","props":{"id":"wc--print-the-number-of-lines-words-or-bytes-from-an-input-or-a-file"},"children":[{"type":"text","value":"Wc | Print the number of lines, words or bytes from an input or a file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Wc ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"W"}]},{"type":"text","value":"ord "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"c"}]},{"type":"text","value":"ounting) is a command that helps you to count lines and words inside a file or an input. The following command counts the number of lines result of the ls command. Since each line represents a file or a directory, the whole command that is shown below counts the number of elements inside a directory:"}]},{"type":"element","tag":"code","props":{"code":"ls | wc -l\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"ls "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" wc -l"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If instead, you want to count the number of words in a file:"}]},{"type":"element","tag":"code","props":{"code":"wc -w file\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"wc -w file"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Or a number of bytes:"}]},{"type":"element","tag":"code","props":{"code":"wc -c file\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"wc -c file"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By default "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc"}]},{"type":"text","value":" without any arguments returns 3 numbers that represent: the number of lines, number of words and number of bytes."}]},{"type":"element","tag":"h3","props":{"id":"find--du--get-a-sorted-list-of-all-directories-in-a-hierarchy-ordered-by-their-size"},"children":[{"type":"text","value":"Find | Du | Get a sorted list of all directories in a hierarchy ordered by their size"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command searches recursively for all directories that exist in a path and obtains their size on disk. When the process finishes the result is piped into the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" command to sort the result based on the folder size output."}]},{"type":"element","tag":"code","props":{"code":"echo \"$(for i in $(find /home/aegos/Descargas -type d); do du -hs $i 2>/dev/null; done;)\" | sort -h\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"echo"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"for i "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"find /home/aegos/Descargas -type d"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":");"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"do"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" du -hs "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"2>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/dev/null"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"done"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";)\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" sort -h"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Translated to human language the command above means the following: For each folder found by the find command execute "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"du"}]},{"type":"text","value":" to check the space of each "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":" directory on disk and pass the entire result of the query to the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" to organize the result based on the space."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"find "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"./folder"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" -type d"}]}]},{"type":"text","value":" : Search for all directories in a path."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"du -hs"}]}]},{"type":"text","value":" : Prints the size of a folder in a human readable way, together with the directory path name."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"sort -h"}]}]},{"type":"text","value":" : Sort the entire result by the size obtained with du. The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-h"}]},{"type":"text","value":" argument indicates the command that you want to sort using the size information that was printed in a human readable way. In this way data such as: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"21G"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"10M"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"100K"}]},{"type":"text","value":" is sorted accordingly."}]},{"type":"element","tag":"h3","props":{"id":"find--wc--get-the-number-of-files-inside-all-directories-in-a-hierarchy"},"children":[{"type":"text","value":"Find | Wc | Get the number of files inside all directories in a hierarchy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command searches recursively for all directories that exist in a path and obtains the number of elements inside. When the process finishes the result is piped into the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" command to sort the result based on the number of elements inside. Useful for cluster clients with resource limits such as a maximum number of files, the command allows you to identify which is the folder with more files inside."}]},{"type":"element","tag":"code","props":{"code":"echo \"$(for i in $(find /folder -type d); do echo \"$( ls -la \"$i\" 2>/dev/null| grep \"^[-]\"| wc -l) $i\"; done;)\"| sort -n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"echo"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"for i "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"find /folder -type d"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":");"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"do"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"echo"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" ls -la "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"2>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/dev/null"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" grep "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"^[-]"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" wc -l"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\";"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"done"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";)\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" sort -n"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Translated to human language the command above means the following: For each folder found by the find command execute "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" to get the elements inside each folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":", filter the result to get only file elements and pass its result to the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc -l"}]},{"type":"text","value":" to count them. When all directories have been visited, pass the entire result to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" command to organize the directories based on their ammount of elements."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"find ./folder -type d"}]}]},{"type":"text","value":" : Search for all directories in a path."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"echo"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" ls -la "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"2>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/dev/null"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" grep "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"^[-]"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" wc -l"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"done"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"text","value":" : Prints the result of executing the command that counts the number of files inside a directory together with the path of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"- "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"ls -la "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"i"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"2>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"/dev/null"}]}]},{"type":"text","value":" : Get all elements of a directory and if there is any error output to /dev/null to prevent it from getting piped into the next command. "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"2>/dev/null"}]},{"type":"text","value":" redirects stderr to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/dev/null"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"- "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"grep "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"^[-]"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"text","value":" : Print only lines that start with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" from the output of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" that will match with those lines that refer to a file, filtering in this way every directory or symbolic link."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"- "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"wc -l"}]}]},{"type":"text","value":" : From the filtered result obtained with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"grep"}]},{"type":"text","value":" print the number of lines."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"sort -n"}]}]},{"type":"text","value":" : Sort the entire result by the count result obtained with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc"}]},{"type":"text","value":". The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-n"}]},{"type":"text","value":" argument indicates the command that you want to sort by number."}]},{"type":"element","tag":"h3","props":{"id":"setsid--run-a-command-in-background"},"children":[{"type":"text","value":"Setsid | Run a command in background"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Setsid allows you to run a command with no controlling terminal. Normally if you execute a program inside the terminal, the shell you are using is the parent process of the new process. When you close the shell a SIGHUP ("},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Sig"}]},{"type":"text","value":"nal "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"h"}]},{"type":"text","value":"ang "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"up"}]},{"type":"text","value":") signal is sent to all its child processes, which by default its response to this behavior is terminate. Setsid makes the new process a session and process group leader, whose father would be directly systemd (or init depending of the linux distribution you are on), which means that it will not receive the SIGHUP signal when the controlling terminal is closed since the program does not hang from it."}]},{"type":"element","tag":"code","props":{"code":"setsid firefox &>/dev/null\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"setsid firefox "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"&>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"/dev/null"}]}]}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It is important to mention that by default the program output is still attached to the terminal from where setsid is executed, so if you don't want your terminal to be polluted with the output or errors coming from the new program executed ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"firefox"}]},{"type":"text","value":" in the case of the command above), you can redirect its output to the null device: "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"&>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"/dev/null"}]}]},{"type":"text","value":". "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"1>"}]}]},{"type":"text","value":" to redirect the output (stdout), "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"2>"}]}]},{"type":"text","value":" to redirect errors (stderr) and "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"&>"}]}]},{"type":"text","value":" to redirect both of them."}]}]},{"type":"element","tag":"h3","props":{"id":"nohup--run-a-command-in-background-by-making-it-ignore-the-sighup-signal"},"children":[{"type":"text","value":"Nohup | Run a command in background by making it ignore the sighup signal"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nohup allows you to run a command that will ignore any SIGHUP signal received. When the shell closes, the process started with nohup ignores the SIGHUP signal, becoming, in this way, an orphan. The orphan process will then be adopted by systemd or init, allowing its execution continuity in background."}]},{"type":"element","tag":"code","props":{"code":"nohup firefox &>/dev/null &\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"nohup firefox "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"&>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"/dev/null "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"&"}]}]}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are using "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"zsh"}]},{"type":"text","value":" instead of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" you can run a program in background just by putting "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"&!"}]},{"type":"text","value":" at the end of command such as "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"firefox "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"&!"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"tee--redirect-the-output-of-a-command-to-multiple-outputs"},"children":[{"type":"text","value":"Tee | Redirect the output of a command to multiple outputs"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Tee is a command that allows you to redirect stdin to multiple commands, output files or/and standard output, which allows you to duplicate and/or process this information simultaneously using different tools or commands."}]},{"type":"element","tag":"code","props":{"code":"echo \"a a\"| tee $(tty) >(wc -w) file_last_output -a file_all_outputs | sed \"s/a/b/g\" \n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"echo"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"a a"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" tee "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"tty"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"wc -w"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" file_last_output -a file_all_outputs "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" sed "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s/a/b/g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Translated to human language the command above takes the result of echo and pipes its result into the tee command which duplicates the input received to write into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$(tty)"}]},{"type":"text","value":" (which is the file connected to the current terminal) to print into the current terminal, to pass stdin to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc -w"}]},{"type":"text","value":" in order to count the number of words that are received from the echo command, to write stdin into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"file_last_output"}]},{"type":"text","value":", to append it into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"file_all_outputs"}]},{"type":"text","value":", to be finally piped into "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sed"}]},{"type":"text","value":" to replace each \"a\" into \"b\", result that will be printed into the terminal."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"tty"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":" : Command substitution. Takes the output of the command "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"tty"}]},{"type":"text","value":" to be used as argument in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"tee"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"wc -w"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":" : Duplicates the input received by tee and feeds the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wc"}]},{"type":"text","value":" command to count the number of words."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"file_last_output"}]}]},{"type":"text","value":" : Duplicates the input received by tee and outputs into the file file_las_output."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"-a file_last_output"}]}]},{"type":"text","value":" : Duplicates the input received by tee and appends into the file file_all_outputs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"code-inline","props":{"lang":"bash","class":"colored"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" sed "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s/a/b/g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"text","value":" : Pipes stdout of tee which has the same content as its input into sed to turn every \"a\" into \"b\"."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Notice that this example is a little bit awkward and it will be replaced by a better use case when it is found. The purpose of the command above is to show the use of tee with command substitution, with a command as receiver, a normal file as output, appending into an ouput file and piping at the end."}]}]},{"type":"element","tag":"h3","props":{"id":"python--using-python-directly-from-the-terminal"},"children":[{"type":"text","value":"Python | Using Python directly from the terminal"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can make use of bash pipes together with python by using the stdin library. The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"-c"}]},{"type":"text","value":" allows you to pass code to python as argument without the need of using files. This is interesting if you want to simplify inline commands that would be complex in case they are written entirely with bash."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following command pipes the result of ls into python3 -c, and then the python program loops over the lines received as stdin, result of the ls piping, printing them using the standard output."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Python syntax is highly dependant of breaklines, so in order to use them inside inline bash commands you need to make use of echo as shown in the command below:"}]}]},{"type":"element","tag":"code","props":{"code":"ls | python3 -c \"$(echo \"from sys import stdin\\nfor line in stdin: print(line)\")\"\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"ls "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" python3 -c "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\"$("}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"echo "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"from sys import stdin\\nfor line in stdin: print(line)"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\")\""}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"or making use of a non-POSIX compliant method such as "},{"type":"element","tag":"a","props":{"href":"https://www.gnu.org/software/bash/manual/bash.html#ANSI_002dC-Quoting","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"ANSI-C quoted string"}]},{"type":"text","value":" shown below:"}]},{"type":"element","tag":"code","props":{"code":"ls | python3 -c $'from sys import stdin\\nfor line in stdin: print(line)'\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"ls "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" python3 -c "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"$'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"from sys import stdin"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"for line in stdin: print(line)"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"bash-commands","depth":2,"text":"Bash commands","children":[{"id":"xargs--using-the-output-of-the-last-command-as-arguments-of-another-command","depth":3,"text":"Xargs | Using the output of the last command as arguments of another command"},{"id":"grep--search-for-a-string-within-all-files-in-a-directory-and-its-subfolders","depth":3,"text":"Grep | Search for a string within all files in a directory and its subfolders"},{"id":"find--find-files-that-match-multiple-names","depth":3,"text":"Find | Find files that match multiple names"},{"id":"pgrep--get-the-pid-of-a-process-by-its-name","depth":3,"text":"Pgrep | Get the PID of a process by its name"},{"id":"pkill--kill-a-process-by-its-name","depth":3,"text":"Pkill | Kill a process by its name"},{"id":"pkill--kill-all-processes-of-a-user","depth":3,"text":"Pkill | Kill all processes of a user"},{"id":"grep--sed--replace-the-content-of-files-from-a-specific-folder-and-its-subfolders","depth":3,"text":"Grep | Sed | Replace the content of files from a specific folder and its subfolders"},{"id":"du--get-the-size-of-a-folder-or-a-file","depth":3,"text":"Du | Get the size of a folder or a file"},{"id":"wc--print-the-number-of-lines-words-or-bytes-from-an-input-or-a-file","depth":3,"text":"Wc | Print the number of lines, words or bytes from an input or a file"},{"id":"find--du--get-a-sorted-list-of-all-directories-in-a-hierarchy-ordered-by-their-size","depth":3,"text":"Find | Du | Get a sorted list of all directories in a hierarchy ordered by their size"},{"id":"find--wc--get-the-number-of-files-inside-all-directories-in-a-hierarchy","depth":3,"text":"Find | Wc | Get the number of files inside all directories in a hierarchy"},{"id":"setsid--run-a-command-in-background","depth":3,"text":"Setsid | Run a command in background"},{"id":"nohup--run-a-command-in-background-by-making-it-ignore-the-sighup-signal","depth":3,"text":"Nohup | Run a command in background by making it ignore the sighup signal"},{"id":"tee--redirect-the-output-of-a-command-to-multiple-outputs","depth":3,"text":"Tee | Redirect the output of a command to multiple outputs"},{"id":"python--using-python-directly-from-the-terminal","depth":3,"text":"Python | Using Python directly from the terminal"}]}]}},"_type":"markdown","_id":"content:blog:useful-linux-commands-and-utilities.md","_source":"content","_file":"blog/useful-linux-commands-and-utilities.md","_extension":"md"},{"_path":"/blog/how-to-deploy-nuxt3-app-in-github-pages","_draft":false,"_partial":false,"_empty":false,"title":"How to deploy a Nuxt 3 app in Github Pages","description":"Tutorial that will explain briefly how to generate and upload a Nuxt 3 application in Github Pages.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"how-to-deploy-a-nuxt-3-web-app-in-github-pages"},"children":[{"type":"text","value":"How to deploy a Nuxt 3 web app in Github Pages"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following tutorial will explain how to deploy an application with the new version of Nuxt, "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3"}]},{"type":"text","value":". Notice that by the time this article is written "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3"}]},{"type":"text","value":" is in its Release Candidate version, so in the future, some of the problems that are being tackled here will be already solved."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt version: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/framework/releases/tag/v3.0.0-rc.4","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"3.0.0-rc.4"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"1-nuxt-3-and-static-site-generation-ssg"},"children":[{"type":"text","value":"1. Nuxt 3 and static site generation (SSG)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The first step to deploy a Nuxt project on GitHub is to transform it into something that a simple web server, such as github pages, can serve. For this Nuxt provides us with the functionality to generate a static site, that is, the functionality to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"transform our Nuxt/Vue project into a static page consisting only of JS, CSS, HTML and Assets such as images"}]},{"type":"text","value":". "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3"}]},{"type":"text","value":" allows you to generate a static site in two different ways:"}]},{"type":"element","tag":"h3","props":{"id":"11-ssg-spa-single-page-application"},"children":[{"type":"text","value":"1.1 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"SSG. SPA (Single Page Application)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This generation mode is similar to the one provided by raw "},{"type":"element","tag":"a","props":{"href":"https://vuejs.org/guide/introduction.html#what-is-vue","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Vue"}]},{"type":"text","value":". It generates a site consisting of one "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":", a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"404.html"}]},{"type":"text","value":" and a bunch of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".css"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".js"}]},{"type":"text","value":" and assets files. This "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":" will contain just a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"div"}]},{"type":"text","value":" tag and a call to a javascript file that will render the entire page on that tag.  When you click on a link inside the page, what you are doing behind the scenes, is calling a javascript routine that changes the path in the URL and rerenders the webpage for that subroute. If instead of accessing this SPA webpage from the main root you access it directly from a subroute link, the webserver will not recognize the route, it will throw a 404 error and it will fall back to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"404.html"}]},{"type":"text","value":" file that was commented before. This fallback is configured by the web server, in this case, GitHub pages. Once the fallback is triggered and you load "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"404.html"}]},{"type":"text","value":", this file has a redirect call to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":" that will recognize the path you inserted and will render the page with that subroute."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A diagram to understand better what was explained below:"}]},{"type":"element","tag":"mermaid","props":{"name":"SPAflow"},"children":[{"type":"element","tag":"code","props":{"code":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant index.html\n    participant 404.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>404.html: I don't have /blog so I will fallback to 404.html\n    404.html-->>Browser: Receiving 404.html\n    Browser->>Browser: Executing JavaScript 404.html \n    Browser->>Web Server: 404.html redirects me to /\n    Web Server->>index.html: Let's get index.html\n    index.html-->>Browser: Receiving index.html\n    loop Rendering process\n        Browser->>Browser: Rendering /blog if that route exists.\n        Browser->>Web Server: Get resources .js, .jpg...\n        Web Server-->>Browser: Getting resources\n    end\n   \n\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant index.html\n    participant 404.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>404.html: I don't have /blog so I will fallback to 404.html\n    404.html-->>Browser: Receiving 404.html\n    Browser->>Browser: Executing JavaScript 404.html \n    Browser->>Web Server: 404.html redirects me to /\n    Web Server->>index.html: Let's get index.html\n    index.html-->>Browser: Receiving index.html\n    loop Rendering process\n        Browser->>Browser: Rendering /blog if that route exists.\n        Browser->>Web Server: Get resources .js, .jpg...\n        Web Server-->>Browser: Getting resources\n    end\n   \n\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This configuration comes with some advantages such as beautiful and fast effects and transitions between pages but, as you may have anticipated, come as well with two main problems."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"❌ "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Search engine crawling:"}]},{"type":"text","value":" Even though search engines nowadays can render javascript inside webpages to stalk content from them, if they see that they need to do extra effort to activate their JS engines to sneak into, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"they will punish you with oblivion"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"❌ "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"People with javascript deactivated:"}]},{"type":"text","value":" There are people out there with JavaScript deactivated that will ignore your content if they are not able to watch it without JavaScript."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to generate a SPA application with Nuxt 3 you need to:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Put the following configuration in your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"./nuxt.config.js","note":"json"},"children":[{"type":"element","tag":"code","props":{"code":"{\n  ...\n\n  generate:{\n    nojekyll: true, //not working on this version\n    fallback: '404.html',\n  },\n  ssr: false, //When false\n  target: \"static\", // and static, nuxt generates a SPA\n\n  ...\n}\n","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n  ...\n\n  generate:{\n    nojekyll: true, //not working on this version\n    fallback: '404.html',\n  },\n  ssr: false, //When false\n  target: \"static\", // and static, nuxt generates a SPA\n\n  ...\n}\n"}]}]}]}]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Execute the following command"}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"Inside your project folder","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"npx nuxi generate\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npx nuxi generate\n"}]}]}]}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The result of the generation could be found in the folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h3","props":{"id":"12-ssg-hybrid-or-universal-mode"},"children":[{"type":"text","value":"1.2 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"SSG. Hybrid or Universal mode"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Hybrid, also called Universal, mode of Nuxt for generating a website is one of the main highlights of this framework, and the main reason I decided to use it instead of raw Vue 3. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"This generation mode creates an HTML file for each subroute of your webpage that will contain all the content already rendered on it"}]},{"type":"text","value":". When you execute this generation there is a renderer, an engine called "},{"type":"element","tag":"a","props":{"href":"https://nitro.unjs.io/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nitro"}]},{"type":"text","value":", that will go into every route of your webpage executing its JavaScript and generating for each of them an already rendered HTML."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nevertheless, what is written above is not the only special thing about this mode. Aside from getting without executing any code the total content for each route, if you have javascript enabled, a process called hydration begins. The hydration process, \"hydrates\" the HTML with JavaScript making the webpage, from the route/HTML you access, behave as a SPA (Single page application). Using this generation process you have all the advantages of SPA without the drawbacks commented on inside this "},{"type":"element","tag":"a","props":{"href":"#11-ssg-spa-single-page-application"},"children":[{"type":"text","value":"section"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I believe the following diagram clarifies better what was explained before:"}]},{"type":"element","tag":"mermaid","props":{"name":"Hybridflow"},"children":[{"type":"element","tag":"code","props":{"code":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant /blog/index.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>/blog/index.html: I do find blog! Wait a minute.\n    /blog/index.html-->>Browser: Sending /blog  to the client with all the content rendered by Nitro.\n\n    loop Hydration process\n        Browser->>Browser: Hydrating the blog HTML so we can use as SPA\n        Browser->>Web Server: Get resources for hydration and prefetching .js, .jpg...\n        Web Server-->>Browser: Response with resources\n    end\n   \n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant /blog/index.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>/blog/index.html: I do find blog! Wait a minute.\n    /blog/index.html-->>Browser: Sending /blog  to the client with all the content rendered by Nitro.\n\n    loop Hydration process\n        Browser->>Browser: Hydrating the blog HTML so we can use as SPA\n        Browser->>Web Server: Get resources for hydration and prefetching .js, .jpg...\n        Web Server-->>Browser: Response with resources\n    end\n   \n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to generate a hybrid static site with Nuxt you need to:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Put the following configuration in your nuxt.config.ts"}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"./nuxt.config.js","note":"json"},"children":[{"type":"element","tag":"code","props":{"code":"{\n  ...\n\n  generate:{\n    nojekyll: true, //not working on this version\n  },\n  ssr: true, //server side rendered enabled //When true\n  target: \"static\", // and static, nuxt generates a hybrid static site\n\n  ...\n}\n","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n  ...\n\n  generate:{\n    nojekyll: true, //not working on this version\n  },\n  ssr: true, //server side rendered enabled //When true\n  target: \"static\", // and static, nuxt generates a hybrid static site\n\n  ...\n}\n"}]}]}]}]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Execute the following command"}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"Inside your project folder","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"npx nuxi generate\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npx nuxi generate\n"}]}]}]}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The result of the generation could be found in the folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h3","props":{"id":"13-generate-to-deploy-in-a-specific-github-subproject"},"children":[{"type":"text","value":"1.3 Generate to deploy in a specific GitHub subproject"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to deploy your Nuxt 3 application into a GitHub subproject you need to specify Nuxt which is the public path where resources are going to live. The generated files have dependencies pointing to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":" by default, so if you have your project deployed in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/nuxt-project/"}]},{"type":"text","value":", what is going to happen is that the webpage tries to access resources on "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":" and they will be not found, showing a white page as a result."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The configuration to point dependencies to the right public path in Nuxt 3 is the one that follows:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"./nuxt.config.js","note":"json"},"children":[{"type":"element","tag":"code","props":{"code":"{\n  ...\n\n  app: {\n      baseURL: \"/yourrepositoryname/\"\n  }\n\n  ...\n}\n","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n  ...\n\n  app: {\n      baseURL: \"/yourrepositoryname/\"\n  }\n\n  ...\n}\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"IMPORTANT! When you execute the generation with this configuration parameter, the build is created in the following folder:  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public/yourrepositoryname"}]}]}]},{"type":"element","tag":"h3","props":{"id":"14-image-path-resolution-after-bundle"},"children":[{"type":"text","value":"1.4 Image path resolution after bundle"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the problems I first faced when I generate the site for the first time was images. I served the application and I found out that some images were not being displayed. What happened is that "},{"type":"element","tag":"a","props":{"href":"https://vitejs.dev/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Vite"}]},{"type":"text","value":", the bundler used to build and generate the static site in Nuxt 3, is taking every asset in your assets/ folder, processing them, renaming them and taking them to another place, so some paths were wrong, but others no... why?. Actually, Vite automatically transforms path strings that are found inside every "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<template></template>"}]},{"type":"text","value":" of your project into new ones result of the generation process... BUT!! "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"If you have for example an array with image paths, and you want to loop over it to render images dynamically, you have a problem, because paths you have in your array do not point to the right location of your processed assets."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To solve this problem you have to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"import.meta.globEager(\"assetdirectory\")"}]},{"type":"text","value":" (Only for the Vite bundler). The Vite bundler transforms this code fragment into a json, with the original assets path inside the \"assetdirectory\" as keys and the new path as value. Example:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"Before Vite bundler","note":"TypeScript"},"children":[{"type":"element","tag":"code","props":{"code":"const modules = import.meta.globEager(\"/assets/img/*\")\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const modules = import.meta.globEager(\"/assets/img/*\")\n"}]}]}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"After Vite bundler","note":"JS"},"children":[{"type":"element","tag":"code","props":{"code":"const modules = {\n  \"/assets/img/logo.png\": __vite_ssr_import_0__, \n  \"/assets/img/logo2.png\": __vite_ssr_import_1__\n  // __vite_ssr_import points where the resource now lives\n};\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const modules = {\n  \"/assets/img/logo.png\": __vite_ssr_import_0__, \n  \"/assets/img/logo2.png\": __vite_ssr_import_1__\n  // __vite_ssr_import points where the resource now lives\n};\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So if you want to render assets dynamically in your Nuxt 3 project you will need to execute a function similar to this one to resolve the new path of the asset:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"example.vue","note":"TYPESCRIPT"},"children":[{"type":"element","tag":"code","props":{"code":"<template>\n  <div>\n    <img \n      for=\"originalImagePath, index of images\" \n      key=\"index\" \n      :src=\"resolveImagePath(originalImagePath)\" \n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n\nconst images: Array<String> = [\"/assets/img/logo\",\"/assets/img/logo2\"];\n\nconst resolveImagePath = (originalImagePath:string) => {\n  //The argument of globEager needs to be a string literal since it is\n  //a bundler requirement for generating the map. You can imagine that if it is\n  //a variable the bundler will be not able to do the transformation.\n  const modules = import.meta.globEager(\"/assets/img/*\");\n  return modules[originalImagePath];\n}\n\n</script>\n","language":"html"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div>\n    <img \n      for=\"originalImagePath, index of images\" \n      key=\"index\" \n      :src=\"resolveImagePath(originalImagePath)\" \n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n\nconst images: Array<String> = [\"/assets/img/logo\",\"/assets/img/logo2\"];\n\nconst resolveImagePath = (originalImagePath:string) => {\n  //The argument of globEager needs to be a string literal since it is\n  //a bundler requirement for generating the map. You can imagine that if it is\n  //a variable the bundler will be not able to do the transformation.\n  const modules = import.meta.globEager(\"/assets/img/*\");\n  return modules[originalImagePath];\n}\n\n</script>\n"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"15-avoid-nuxt-3-static-site-prefetching"},"children":[{"type":"text","value":"1.5. Avoid Nuxt 3 Static Site prefetching"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Prefetching is a feature of Nuxt 3 that allows the application during the hydration process to \"prefetch\" some resources from other routes of the application to obtain fast transitions between paths in the Hybrid mode of Static Site Generation. The version of Nuxt that we are tackling in this article is still in development, and prefetching is one of the things that prove this fact.  In "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/framework/releases/tag/v3.0.0-rc.4","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"3.0.0-rc.4"}]}]},{"type":"text","value":" this feature is not working properly and every route of the application loads all resources of all routes, leading to huge performance issues."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I tried with some configuration parameters in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":" but the option for controlling the prefetching is not implemented or not working properly yet. The best and fastest option I came up with is executing the following command over the build to remove prefetching totally."}]},{"type":"element","tag":"code","props":{"code":"grep -rwl \"<link rel=\\\"prefetch\\\"\" .output/public | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"grep -rwl \"<link rel=\\\"prefetch\\\"\" .output/public | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\n\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are wondering why your Nuxt 3 application is slow and you see big downloads of resources in your browser this one could be the cause. By simply executing the command shown before you will get better performance."}]},{"type":"element","tag":"h2","props":{"id":"2-deploy-nuxt-3-application-on-github"},"children":[{"type":"text","value":"2. Deploy Nuxt 3 application on Github"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you have completed the steps and taken into account the details shown above you should have a fully functional static site in the folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public/"}]},{"type":"text","value":" or here "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public/repositoryname"}]},{"type":"text","value":" if you activated the parameter explained "},{"type":"element","tag":"a","props":{"href":"#13-generate-to-deploy-in-a-specific-github-subproject"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":". Still, this build is not enough to have your site working inside Github."}]},{"type":"element","tag":"h3","props":{"id":"21-nojekyll-file"},"children":[{"type":"text","value":"2.1 Nojekyll file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By default, Github Pages uses "},{"type":"element","tag":"a","props":{"href":"https://jekyllrb.com/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Jekyll"}]},{"type":"text","value":", a static sites generator. If your project has a specific format it will automatically be transformed into a static site. Jekyll is a good option if you want to build a simple blog without the fancy virtual dom that you could get with Vue or React. You can check their webpage if you are interested."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The problem with Github Pages using Jekyll as a default mechanism to generate static sites is that "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"it uses names of folders or files that start with underscore as special resources."}]},{"type":"text","value":" Why does this affect us? It happens that the static site generated by Nuxt contains a folder that starts with an underscore: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"_nuxt"}]},{"type":"text","value":". If you do not do anything, your deployment enters into conflict with Jekyll and it will not work. To solve this issue you need to create a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".nojekyll"}]},{"type":"text","value":" file inside the generated site to prevent Jekyll from being executed when you deploy on Github Pages. This file is supposed to be generated by Nuxt if you put the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"generator:{nojekyll:true}"}]},{"type":"text","value":" option inside nuxt.config.ts, but it does not work on this version yet."}]},{"type":"element","tag":"code-wrapper","props":{"description":"/nuxt-project-folder/","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"cd .output/public or .output/public/yourrepositoryname\ntouch .nojekyll\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"cd .output/public or .output/public/yourrepositoryname\ntouch .nojekyll\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you should be ready to follow the next sections to proceed with the deployment on Github."}]},{"type":"element","tag":"h3","props":{"id":"22-deploy-manually-on-github"},"children":[{"type":"text","value":"2.2 Deploy manually on github"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You need to execute the following sequence of commands:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"/nuxt-project-folder/","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"npx nuxi generate\ngrep -rnwl \"<link rel=\\\"prefetch\\\"\" .output/public | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\ncd .output/public or .output/public/yourrepositoryname\ntouch .nojekyll\ngit init\ngit add .\ngit remote add origin \"github_repository_url.git\"\ngit checkout -b \"branch_name\"\ngit commit -a -m \"First commit\"\ngit push -u origin \"branch_name\"\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npx nuxi generate\ngrep -rnwl \"<link rel=\\\"prefetch\\\"\" .output/public | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\ncd .output/public or .output/public/yourrepositoryname\ntouch .nojekyll\ngit init\ngit add .\ngit remote add origin \"github_repository_url.git\"\ngit checkout -b \"branch_name\"\ngit commit -a -m \"First commit\"\ngit push -u origin \"branch_name\"\n\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After push, you will need to configure Github Pages from your repository settings to serve your webpage from the specific branch."}]},{"type":"element","tag":"h3","props":{"id":"21-deploy-on-github-with-github-actions"},"children":[{"type":"text","value":"2.1 Deploy on Github with Github Actions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To deploy on github automatically using github actions you need to create the following file in your nuxt project:"}]},{"type":"element","tag":"code-wrapper","props":{"description":".github/workflows/deploy.yml","note":"YAML"},"children":[{"type":"element","tag":"code","props":{"code":"name: Deploy to GitHub pages\non:\n  push:\n    branches: [nuxt]\nenv:\n  BUILD_FOLDER: .output/public # or .output/public/yourrepositoryname/\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Generate static Nuxt 3 files\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: 'yarn'\n      \n      - run: |\n          yarn install\n          yarn generate\n\n      - name: Init new repo in $BUILD_FOLDER and commit generated files\n        run: |\n          grep -rnwl \"<link rel=\\\"prefetch\\\"\" $BUILD_FOLDER | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\n          cd $BUILD_FOLDER\n          touch .nojekyll\n          git init\n          git add -A\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git commit -m 'deploy'\n\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: ${{env.BUILD_FOLDER}}\n","language":"yaml"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: Deploy to GitHub pages\non:\n  push:\n    branches: [nuxt]\nenv:\n  BUILD_FOLDER: .output/public # or .output/public/yourrepositoryname/\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Generate static Nuxt 3 files\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: 'yarn'\n      \n      - run: |\n          yarn install\n          yarn generate\n\n      - name: Init new repo in $BUILD_FOLDER and commit generated files\n        run: |\n          grep -rnwl \"<link rel=\\\"prefetch\\\"\" $BUILD_FOLDER | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\n          cd $BUILD_FOLDER\n          touch .nojekyll\n          git init\n          git add -A\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git commit -m 'deploy'\n\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: ${{env.BUILD_FOLDER}}\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you push the commit your static site will be deployed on the branch gh-pages."}]}]},"date":"2022-06-30","language":"en","tags":["Nuxt 3","Vue 3"],"image":"/assets/img/blog/nuxt-github-pages.jpg","published":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"how-to-deploy-a-nuxt-3-web-app-in-github-pages"},"children":[{"type":"text","value":"How to deploy a Nuxt 3 web app in Github Pages"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following tutorial will explain how to deploy an application with the new version of Nuxt, "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3"}]},{"type":"text","value":". Notice that by the time this article is written "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3"}]},{"type":"text","value":" is in its Release Candidate version, so in the future, some of the problems that are being tackled here will be already solved."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt version: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/framework/releases/tag/v3.0.0-rc.4","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"3.0.0-rc.4"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"1-nuxt-3-and-static-site-generation-ssg"},"children":[{"type":"text","value":"1. Nuxt 3 and static site generation (SSG)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The first step to deploy a Nuxt project on GitHub is to transform it into something that a simple web server, such as github pages, can serve. For this Nuxt provides us with the functionality to generate a static site, that is, the functionality to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"transform our Nuxt/Vue project into a static page consisting only of JS, CSS, HTML and Assets such as images"}]},{"type":"text","value":". "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nuxt 3"}]},{"type":"text","value":" allows you to generate a static site in two different ways:"}]},{"type":"element","tag":"h3","props":{"id":"11-ssg-spa-single-page-application"},"children":[{"type":"text","value":"1.1 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"SSG. SPA (Single Page Application)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This generation mode is similar to the one provided by raw "},{"type":"element","tag":"a","props":{"href":"https://vuejs.org/guide/introduction.html#what-is-vue","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Vue"}]},{"type":"text","value":". It generates a site consisting of one "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":", a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"404.html"}]},{"type":"text","value":" and a bunch of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".css"}]},{"type":"text","value":", "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".js"}]},{"type":"text","value":" and assets files. This "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":" will contain just a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"div"}]},{"type":"text","value":" tag and a call to a javascript file that will render the entire page on that tag.  When you click on a link inside the page, what you are doing behind the scenes, is calling a javascript routine that changes the path in the URL and rerenders the webpage for that subroute. If instead of accessing this SPA webpage from the main root you access it directly from a subroute link, the webserver will not recognize the route, it will throw a 404 error and it will fall back to the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"404.html"}]},{"type":"text","value":" file that was commented before. This fallback is configured by the web server, in this case, GitHub pages. Once the fallback is triggered and you load "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"404.html"}]},{"type":"text","value":", this file has a redirect call to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"index.html"}]},{"type":"text","value":" that will recognize the path you inserted and will render the page with that subroute."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A diagram to understand better what was explained below:"}]},{"type":"element","tag":"mermaid","props":{"name":"SPAflow"},"children":[{"type":"element","tag":"code","props":{"code":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant index.html\n    participant 404.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>404.html: I don't have /blog so I will fallback to 404.html\n    404.html-->>Browser: Receiving 404.html\n    Browser->>Browser: Executing JavaScript 404.html \n    Browser->>Web Server: 404.html redirects me to /\n    Web Server->>index.html: Let's get index.html\n    index.html-->>Browser: Receiving index.html\n    loop Rendering process\n        Browser->>Browser: Rendering /blog if that route exists.\n        Browser->>Web Server: Get resources .js, .jpg...\n        Web Server-->>Browser: Getting resources\n    end\n   \n\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{}},"children":[{"type":"text","value":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant index.html\n    participant 404.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>404.html: I don't have /blog so I will fallback to 404.html\n    404.html-->>Browser: Receiving 404.html\n    Browser->>Browser: Executing JavaScript 404.html \n    Browser->>Web Server: 404.html redirects me to /\n    Web Server->>index.html: Let's get index.html\n    index.html-->>Browser: Receiving index.html\n    loop Rendering process\n        Browser->>Browser: Rendering /blog if that route exists.\n        Browser->>Web Server: Get resources .js, .jpg...\n        Web Server-->>Browser: Getting resources\n    end\n   "}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This configuration comes with some advantages such as beautiful and fast effects and transitions between pages but, as you may have anticipated, come as well with two main problems."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"❌ "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Search engine crawling:"}]},{"type":"text","value":" Even though search engines nowadays can render javascript inside webpages to stalk content from them, if they see that they need to do extra effort to activate their JS engines to sneak into, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"they will punish you with oblivion"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"❌ "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"People with javascript deactivated:"}]},{"type":"text","value":" There are people out there with JavaScript deactivated that will ignore your content if they are not able to watch it without JavaScript."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to generate a SPA application with Nuxt 3 you need to:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Put the following configuration in your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"./nuxt.config.js","note":"json"},"children":[{"type":"element","tag":"code","props":{"code":"{\n  ...\n\n  generate:{\n    nojekyll: true, //not working on this version\n    fallback: '404.html',\n  },\n  ssr: false, //When false\n  target: \"static\", // and static, nuxt generates a SPA\n\n  ...\n}\n","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ..."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  generate"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    nojekyll"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"true,"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//not working on this version"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    fallback"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" '"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F78C6C"}},"children":[{"type":"text","value":"404"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":".html'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":","}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"},"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ssr"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"false,"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//When false"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  target"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"static"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"// and static, nuxt generates a SPA"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ..."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"}"}]}]}]}]}]}]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Execute the following command"}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"Inside your project folder","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"npx nuxi generate\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"npx nuxi generate"}]}]}]}]}]}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The result of the generation could be found in the folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h3","props":{"id":"12-ssg-hybrid-or-universal-mode"},"children":[{"type":"text","value":"1.2 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"SSG. Hybrid or Universal mode"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Hybrid, also called Universal, mode of Nuxt for generating a website is one of the main highlights of this framework, and the main reason I decided to use it instead of raw Vue 3. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"This generation mode creates an HTML file for each subroute of your webpage that will contain all the content already rendered on it"}]},{"type":"text","value":". When you execute this generation there is a renderer, an engine called "},{"type":"element","tag":"a","props":{"href":"https://nitro.unjs.io/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Nitro"}]},{"type":"text","value":", that will go into every route of your webpage executing its JavaScript and generating for each of them an already rendered HTML."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nevertheless, what is written above is not the only special thing about this mode. Aside from getting without executing any code the total content for each route, if you have javascript enabled, a process called hydration begins. The hydration process, \"hydrates\" the HTML with JavaScript making the webpage, from the route/HTML you access, behave as a SPA (Single page application). Using this generation process you have all the advantages of SPA without the drawbacks commented on inside this "},{"type":"element","tag":"a","props":{"href":"#11-ssg-spa-single-page-application"},"children":[{"type":"text","value":"section"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I believe the following diagram clarifies better what was explained before:"}]},{"type":"element","tag":"mermaid","props":{"name":"Hybridflow"},"children":[{"type":"element","tag":"code","props":{"code":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant /blog/index.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>/blog/index.html: I do find blog! Wait a minute.\n    /blog/index.html-->>Browser: Sending /blog  to the client with all the content rendered by Nitro.\n\n    loop Hydration process\n        Browser->>Browser: Hydrating the blog HTML so we can use as SPA\n        Browser->>Web Server: Get resources for hydration and prefetching .js, .jpg...\n        Web Server-->>Browser: Response with resources\n    end\n   \n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{}},"children":[{"type":"text","value":"sequenceDiagram\n    autonumber\n    participant Browser\n    participant Web Server\n    participant /blog/index.html\n    Browser->>Web Server: Give me /blog\n    Web Server->>/blog/index.html: I do find blog! Wait a minute.\n    /blog/index.html-->>Browser: Sending /blog  to the client with all the content rendered by Nitro.\n\n    loop Hydration process\n        Browser->>Browser: Hydrating the blog HTML so we can use as SPA\n        Browser->>Web Server: Get resources for hydration and prefetching .js, .jpg...\n        Web Server-->>Browser: Response with resources\n    end\n   "}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to generate a hybrid static site with Nuxt you need to:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Put the following configuration in your nuxt.config.ts"}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"./nuxt.config.js","note":"json"},"children":[{"type":"element","tag":"code","props":{"code":"{\n  ...\n\n  generate:{\n    nojekyll: true, //not working on this version\n  },\n  ssr: true, //server side rendered enabled //When true\n  target: \"static\", // and static, nuxt generates a hybrid static site\n\n  ...\n}\n","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ..."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  generate"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    nojekyll"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"true,"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//not working on this version"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"},"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ssr"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"true,"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//server side rendered enabled //When true"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  target"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"static"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"// and static, nuxt generates a hybrid static site"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ..."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"}"}]}]}]}]}]}]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Execute the following command"}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"Inside your project folder","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"npx nuxi generate\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"npx nuxi generate"}]}]}]}]}]}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The result of the generation could be found in the folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h3","props":{"id":"13-generate-to-deploy-in-a-specific-github-subproject"},"children":[{"type":"text","value":"1.3 Generate to deploy in a specific GitHub subproject"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to deploy your Nuxt 3 application into a GitHub subproject you need to specify Nuxt which is the public path where resources are going to live. The generated files have dependencies pointing to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":" by default, so if you have your project deployed in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/nuxt-project/"}]},{"type":"text","value":", what is going to happen is that the webpage tries to access resources on "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":" and they will be not found, showing a white page as a result."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The configuration to point dependencies to the right public path in Nuxt 3 is the one that follows:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"./nuxt.config.js","note":"json"},"children":[{"type":"element","tag":"code","props":{"code":"{\n  ...\n\n  app: {\n      baseURL: \"/yourrepositoryname/\"\n  }\n\n  ...\n}\n","language":"json"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ..."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  app"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      baseURL"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/yourrepositoryname/"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  ..."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"}"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"IMPORTANT! When you execute the generation with this configuration parameter, the build is created in the following folder:  "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public/yourrepositoryname"}]}]}]},{"type":"element","tag":"h3","props":{"id":"14-image-path-resolution-after-bundle"},"children":[{"type":"text","value":"1.4 Image path resolution after bundle"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the problems I first faced when I generate the site for the first time was images. I served the application and I found out that some images were not being displayed. What happened is that "},{"type":"element","tag":"a","props":{"href":"https://vitejs.dev/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Vite"}]},{"type":"text","value":", the bundler used to build and generate the static site in Nuxt 3, is taking every asset in your assets/ folder, processing them, renaming them and taking them to another place, so some paths were wrong, but others no... why?. Actually, Vite automatically transforms path strings that are found inside every "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<template></template>"}]},{"type":"text","value":" of your project into new ones result of the generation process... BUT!! "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"If you have for example an array with image paths, and you want to loop over it to render images dynamically, you have a problem, because paths you have in your array do not point to the right location of your processed assets."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To solve this problem you have to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"import.meta.globEager(\"assetdirectory\")"}]},{"type":"text","value":" (Only for the Vite bundler). The Vite bundler transforms this code fragment into a json, with the original assets path inside the \"assetdirectory\" as keys and the new path as value. Example:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"Before Vite bundler","note":"TypeScript"},"children":[{"type":"element","tag":"code","props":{"code":"const modules = import.meta.globEager(\"/assets/img/*\")\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" modules "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"import"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"meta"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"globEager"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/assets/img/*"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":")"}]}]}]}]}]}]},{"type":"element","tag":"code-wrapper","props":{"description":"After Vite bundler","note":"JS"},"children":[{"type":"element","tag":"code","props":{"code":"const modules = {\n  \"/assets/img/logo.png\": __vite_ssr_import_0__, \n  \"/assets/img/logo2.png\": __vite_ssr_import_1__\n  // __vite_ssr_import points where the resource now lives\n};\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" modules "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"/assets/img/logo.png"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" __vite_ssr_import_0__"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"/assets/img/logo2.png"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" __vite_ssr_import_1__"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"// __vite_ssr_import points where the resource now lives"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"};"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So if you want to render assets dynamically in your Nuxt 3 project you will need to execute a function similar to this one to resolve the new path of the asset:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"example.vue","note":"TYPESCRIPT"},"children":[{"type":"element","tag":"code","props":{"code":"<template>\n  <div>\n    <img \n      for=\"originalImagePath, index of images\" \n      key=\"index\" \n      :src=\"resolveImagePath(originalImagePath)\" \n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n\nconst images: Array<String> = [\"/assets/img/logo\",\"/assets/img/logo2\"];\n\nconst resolveImagePath = (originalImagePath:string) => {\n  //The argument of globEager needs to be a string literal since it is\n  //a bundler requirement for generating the map. You can imagine that if it is\n  //a variable the bundler will be not able to do the transformation.\n  const modules = import.meta.globEager(\"/assets/img/*\");\n  return modules[originalImagePath];\n}\n\n</script>\n","language":"html"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"template"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"div"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"img"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":" "}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"originalImagePath, index of images"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":" "}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"key"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"index"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":" "}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":":src"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"resolveImagePath(originalImagePath)"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":" "}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"    />"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"</"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"div"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"</"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"template"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"script"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"setup"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"lang"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"ts"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" images"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#FFCB6B"}},"children":[{"type":"text","value":"Array"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"style":{"color":"#FFCB6B"}},"children":[{"type":"text","value":"String"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" ["}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/assets/img/logo"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":","}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/assets/img/logo2"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"]"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" resolveImagePath "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"originalImagePath"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#FFCB6B"}},"children":[{"type":"text","value":"string"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"=>"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"{"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//The argument of globEager needs to be a string literal since it is"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//a bundler requirement for generating the map. You can imagine that if it is"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"//a variable the bundler will be not able to do the transformation."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C792EA"}},"children":[{"type":"text","value":"const"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"modules"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"="}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"import"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"meta"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"."}]},{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"globEager"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"("}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"/assets/img/*"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":")"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"return"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"modules"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"["}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"originalImagePath"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"]"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"}"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"</"}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"script"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":">"}]}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"15-avoid-nuxt-3-static-site-prefetching"},"children":[{"type":"text","value":"1.5. Avoid Nuxt 3 Static Site prefetching"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Prefetching is a feature of Nuxt 3 that allows the application during the hydration process to \"prefetch\" some resources from other routes of the application to obtain fast transitions between paths in the Hybrid mode of Static Site Generation. The version of Nuxt that we are tackling in this article is still in development, and prefetching is one of the things that prove this fact.  In "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/framework/releases/tag/v3.0.0-rc.4","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"3.0.0-rc.4"}]}]},{"type":"text","value":" this feature is not working properly and every route of the application loads all resources of all routes, leading to huge performance issues."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I tried with some configuration parameters in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":" but the option for controlling the prefetching is not implemented or not working properly yet. The best and fastest option I came up with is executing the following command over the build to remove prefetching totally."}]},{"type":"element","tag":"code","props":{"code":"grep -rwl \"<link rel=\\\"prefetch\\\"\" .output/public | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"grep -rwl "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"<link rel="}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"\\\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"prefetch"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"\\\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" .output/public "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" xargs sed -i "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are wondering why your Nuxt 3 application is slow and you see big downloads of resources in your browser this one could be the cause. By simply executing the command shown before you will get better performance."}]},{"type":"element","tag":"h2","props":{"id":"2-deploy-nuxt-3-application-on-github"},"children":[{"type":"text","value":"2. Deploy Nuxt 3 application on Github"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you have completed the steps and taken into account the details shown above you should have a fully functional static site in the folder "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public/"}]},{"type":"text","value":" or here "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".output/public/repositoryname"}]},{"type":"text","value":" if you activated the parameter explained "},{"type":"element","tag":"a","props":{"href":"#13-generate-to-deploy-in-a-specific-github-subproject"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":". Still, this build is not enough to have your site working inside Github."}]},{"type":"element","tag":"h3","props":{"id":"21-nojekyll-file"},"children":[{"type":"text","value":"2.1 Nojekyll file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By default, Github Pages uses "},{"type":"element","tag":"a","props":{"href":"https://jekyllrb.com/","rel":["nofollow","noopener","noreferrer"],"target":"_blank"},"children":[{"type":"text","value":"Jekyll"}]},{"type":"text","value":", a static sites generator. If your project has a specific format it will automatically be transformed into a static site. Jekyll is a good option if you want to build a simple blog without the fancy virtual dom that you could get with Vue or React. You can check their webpage if you are interested."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The problem with Github Pages using Jekyll as a default mechanism to generate static sites is that "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"it uses names of folders or files that start with underscore as special resources."}]},{"type":"text","value":" Why does this affect us? It happens that the static site generated by Nuxt contains a folder that starts with an underscore: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"_nuxt"}]},{"type":"text","value":". If you do not do anything, your deployment enters into conflict with Jekyll and it will not work. To solve this issue you need to create a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".nojekyll"}]},{"type":"text","value":" file inside the generated site to prevent Jekyll from being executed when you deploy on Github Pages. This file is supposed to be generated by Nuxt if you put the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"generator:{nojekyll:true}"}]},{"type":"text","value":" option inside nuxt.config.ts, but it does not work on this version yet."}]},{"type":"element","tag":"code-wrapper","props":{"description":"/nuxt-project-folder/","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"cd .output/public or .output/public/yourrepositoryname\ntouch .nojekyll\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"cd"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" .output/public or .output/public/yourrepositoryname"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"touch .nojekyll"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you should be ready to follow the next sections to proceed with the deployment on Github."}]},{"type":"element","tag":"h3","props":{"id":"22-deploy-manually-on-github"},"children":[{"type":"text","value":"2.2 Deploy manually on github"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You need to execute the following sequence of commands:"}]},{"type":"element","tag":"code-wrapper","props":{"description":"/nuxt-project-folder/","note":"BASH"},"children":[{"type":"element","tag":"code","props":{"code":"npx nuxi generate\ngrep -rnwl \"<link rel=\\\"prefetch\\\"\" .output/public | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\ncd .output/public or .output/public/yourrepositoryname\ntouch .nojekyll\ngit init\ngit add .\ngit remote add origin \"github_repository_url.git\"\ngit checkout -b \"branch_name\"\ngit commit -a -m \"First commit\"\ngit push -u origin \"branch_name\"\n\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"npx nuxi generate"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"grep -rnwl "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"<link rel="}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"\\\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"prefetch"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"\\\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" .output/public "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" xargs sed -i "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"s$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"cd"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" .output/public or .output/public/yourrepositoryname"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"touch .nojekyll"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"git init"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"git add "}]},{"type":"element","tag":"span","props":{"style":{"color":"#82AAFF"}},"children":[{"type":"text","value":"."}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"git remote add origin "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"github_repository_url.git"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"git checkout -b "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"branch_name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"git commit -a -m "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"First commit"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"git push -u origin "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"branch_name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After push, you will need to configure Github Pages from your repository settings to serve your webpage from the specific branch."}]},{"type":"element","tag":"h3","props":{"id":"21-deploy-on-github-with-github-actions"},"children":[{"type":"text","value":"2.1 Deploy on Github with Github Actions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To deploy on github automatically using github actions you need to create the following file in your nuxt project:"}]},{"type":"element","tag":"code-wrapper","props":{"description":".github/workflows/deploy.yml","note":"YAML"},"children":[{"type":"element","tag":"code","props":{"code":"name: Deploy to GitHub pages\non:\n  push:\n    branches: [nuxt]\nenv:\n  BUILD_FOLDER: .output/public # or .output/public/yourrepositoryname/\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Generate static Nuxt 3 files\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: 'yarn'\n      \n      - run: |\n          yarn install\n          yarn generate\n\n      - name: Init new repo in $BUILD_FOLDER and commit generated files\n        run: |\n          grep -rnwl \"<link rel=\\\"prefetch\\\"\" $BUILD_FOLDER | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'\n          cd $BUILD_FOLDER\n          touch .nojekyll\n          git init\n          git add -A\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git commit -m 'deploy'\n\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: ${{env.BUILD_FOLDER}}\n","language":"yaml"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"Deploy to GitHub pages"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#FF9CAC"}},"children":[{"type":"text","value":"on"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"push"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"branches"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"["}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"nuxt"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"]"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"env"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"BUILD_FOLDER"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":".output/public"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#545454"}},"children":[{"type":"text","value":"# or .output/public/yourrepositoryname/"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"jobs"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"  "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"build"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"runs-on"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"ubuntu-latest"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"steps"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"Checkout"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"uses"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"actions/checkout@v3"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"Generate static Nuxt 3 files"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"uses"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"actions/setup-node@v3"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"with"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"          "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"node-version"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"16"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"          "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"cache"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"yarn"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"'"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      "}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"run"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          yarn install"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          yarn generate"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"Init new repo in $BUILD_FOLDER and commit generated files"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"run"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"|"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          grep -rnwl \"<link rel=\\\"prefetch\\\"\" $BUILD_FOLDER | xargs sed -i 's$<link rel=\"prefetch\" href=\"[^\"]*\\.\\(jpg\\|png\\|webm\\|jpeg\\|ttg\\|svg\\|gif\\)\">$$g'"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          cd $BUILD_FOLDER"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          touch .nojekyll"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          git init"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          git add -A"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          git config --local user.email \"action@github.com\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          git config --local user.name \"GitHub Action\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"          git commit -m 'deploy'"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"      "}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":"-"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"name"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"Deploy"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"uses"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"JamesIves/github-pages-deploy-action@v4"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"        "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"with"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":"          "}]},{"type":"element","tag":"span","props":{"style":{"color":"#F07178"}},"children":[{"type":"text","value":"folder"}]},{"type":"element","tag":"span","props":{"style":{"color":"#89DDFF"}},"children":[{"type":"text","value":":"}]},{"type":"element","tag":"span","props":{"style":{"color":"#EEFFFF"}},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"style":{"color":"#C3E88D"}},"children":[{"type":"text","value":"${{env.BUILD_FOLDER}}"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you push the commit your static site will be deployed on the branch gh-pages."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"1-nuxt-3-and-static-site-generation-ssg","depth":2,"text":"1. Nuxt 3 and static site generation (SSG)","children":[{"id":"11-ssg-spa-single-page-application","depth":3,"text":"1.1 SSG. SPA (Single Page Application)"},{"id":"12-ssg-hybrid-or-universal-mode","depth":3,"text":"1.2 SSG. Hybrid or Universal mode"},{"id":"13-generate-to-deploy-in-a-specific-github-subproject","depth":3,"text":"1.3 Generate to deploy in a specific GitHub subproject"},{"id":"14-image-path-resolution-after-bundle","depth":3,"text":"1.4 Image path resolution after bundle"},{"id":"15-avoid-nuxt-3-static-site-prefetching","depth":3,"text":"1.5. Avoid Nuxt 3 Static Site prefetching"}]},{"id":"2-deploy-nuxt-3-application-on-github","depth":2,"text":"2. Deploy Nuxt 3 application on Github","children":[{"id":"21-nojekyll-file","depth":3,"text":"2.1 Nojekyll file"},{"id":"22-deploy-manually-on-github","depth":3,"text":"2.2 Deploy manually on github"},{"id":"21-deploy-on-github-with-github-actions","depth":3,"text":"2.1 Deploy on Github with Github Actions"}]}]}},"_type":"markdown","_id":"content:blog:how-to-deploy-nuxt3-app-in-github-pages.md","_source":"content","_file":"blog/how-to-deploy-nuxt3-app-in-github-pages.md","_extension":"md"}]